cov <- covr::package_coverage(
quiet = FALSE,
clean = FALSE,
install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
)
usethis::use_test("main.R")
testthat::test_file("tests/testthat/test-main.R")
# call_main.R
args <- c(
"D:\\pub_sec_data\\interim\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.xlsx",
"Live_Table",
"D:\\pub_sec_data\\preprocessed\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.csv"
)
# Construct the command to call main.R with arguments
command <- paste("Rscript", "D:/coding_repos/tidysheet/inst/workflow/main.r", paste(args, collapse = " "))
# Execute the command
system(command)
# call_main.R
args <- c(
"D:\\pub_sec_data\\interim\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.xlsx",
"Live_Table",
"D:\\pub_sec_data\\preprocessed\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.csv"
)
# Construct the command to call main.R with arguments
command <- paste("Rscript", "D:/coding_repos/tidysheet/inst/workflow/main.r", paste(args, collapse = " "))
# Execute the command
system(command)
# Execute the command
system(command)
# Execute the command
system(command)
getwd()
# Execute the command
system(command)
# Execute the command
system(command)
# Execute the command
system(command)
# Execute the command
system(command)
# Execute the command
system(command)
new_command
# Construct the command to call main.R with arguments
new_command <- paste("Rscript", "D:/coding_repos/pub_sec/preprocessing/revenue_expenditure.r", paste(my_args, collapse = " "))
print(my_args)
example_args <- c(
"D:\\pub_sec_data\\interim\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.xlsx",
"Live_Table",
"D:\\pub_sec_data\\preprocessed\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.csv"
)
# call_main.R
args <- c(
"D:\\pub_sec_data\\interim\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.xlsx",
"Live_Table",
"D:\\pub_sec_data\\preprocessed\\dluhc\\quarterly_revenue_outturn\\dapsen-dluhc-quarterly_revenue_outturn-QRU_live_tables-2023_24.csv"
)
# Construct the command to call main.R with arguments
command <- paste("Rscript", "D:/coding_repos/tidysheet/inst/workflow/main.r", paste(args, collapse = " "))
# Execute the command
system(command)
# Execute the command
system(command)
print(example_args)
# Construct the command to call main.R with arguments
new_command <- paste("Rscript", "D:/coding_repos/pub_sec/preprocessing/revenue_expenditure.r", paste(example_args, collapse = " "))
print(new_command)
# Execute the command
system(new_command)
# Full filepath of the file you want to run the preprocessing on
input_filepath <- paste0("Y:\\pre_dap\\current_data\\interim\\dluhc\\council_tax_nndr_final\\dapsen-dluhc-council_tax_nndr_final-council_tax_nndr_final-2023_24.xlsx")
r_vars <- '["table_heading", "subtable_heading", "subtable_regex",
"subtable_layout", "subtable_header_identifier", "group_col",
"nested_col_1", "nested_col_2", "dropdown_regex", "group_row",
"nested_row_1", "nested_row_2", "horizontal_split_identifier",
"left_headers", "POSIX_column", "group_row_na_identifier",
"combine_start_row_identifier", "combine_end_row_identifier",
"headers_to_combine", "extend_row_regex", "extend_row_order",
"extend_row_with", "col_join_name", "col_join_pairs_1",
"col_join_pairs_2", "cols_to_remove_regex",
"rename_duplicate_in_col", "rename_duplicate_regex",
"rename_duplicate_index", "rename_duplicate_prefix",
"rename_duplicate_expected_freq", "header_identifier",
"second_identifier", "table_split_points", "split_points"]'
# tabname regex comes from pub_sec/pub_sec/config/dev_config.py.
# In this case from [files.dluhc.revenue_expenditure_budget]
# It is the second to last item. Alternatively you can just type in the name of the tab
# that the data comes from
# RA_data_by_LA = ["^RA", "revenue_expenditure.r", ".*(RA.*LA.*Data).*", ".xlsx"]
tabname = "(?i)nov 23 CT"
# If you are just testing the script, it doesn't matter what you put here -
# just put wherever you want to save outputs
# (if you want to look at the result as a csv)
output_filepath_full <- paste0("D:\\pub_sec_data\\preprocessed\\dluhc\\capital_expenditure_final\\dapsen-dluhc-capital_expenditure_final-COR_TAB4-2022_23")
# filepath of the cloned repo. You probably wont need to change this much if at all
pub_sec_filepath <- "D:/coding_repos/pub_sec"
current_location <- file.path(pub_sec_filepath, "pub_sec/preprocessing")
# The nesting structure is a dictionary turned into a string
# It is from the data_dict (pub_sec/pub_sec/config/supplier_data_dicts)
# and is this section: [revenue_expenditure_budget.RA_data_by_LA.sheet_structure]
# the following would be writen like this in the data dict -
# header_identifier = "gross service"
# group_col = "service"
# nested_col_1 = "subservice"
# nested_col_2 = "subservice_code"
sheet_structure_json <- "{
header_identifier: cash,
combine_start_row_identifier: cash,
combine_end_row_identifier: CLLX
group_col: item_detail,
left_headers: year-month
}"
# Layout is also from the data_dict, in the section [revenue_expenditure_budget.RA_data_by_LA.layout]
layout <- "{from_2020_to_21: single_row_header}"
# file part is the part number of the file, this could be 1,2,3
file_part <- 1
# This bit mimics what subprocess.call creates and passes to R
my_args <- c("--args",
input_filepath,
tabname,
output_filepath_full,
current_location,
r_vars,
sheet_structure_json,
layout,
file_part)
# set the working directory (not sure if this is needed actually but it doesn't hurt)
setwd(pub_sec_filepath)
# Construct the command to call main.R with arguments
command <- paste("Rscript", "D:/coding_repos/tidysheet/inst/workflow/main.r", paste(my_args, collapse = " "))
# Execute the command
system(command)
uninstall_precommit(scope = "repo")
library(precommit)
uninstall_precommit(scope = "repo")
library(covr)
detach("package:tidysheet", unload=TRUE)
covr::package_coverage(path = ".",
type = "all",
combine_types = FALSE,
relative_path = TRUE,
quiet = TRUE,
clean = TRUE,
line_exclusions = NULL,
function_exclusions = NULL,
pre_clean = TRUE,
vignettes = TRUE)
cd tidysheet
getwd()
setwd("~")
getwd()
